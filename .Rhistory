install.packages(c("KernSmooth", "R"))
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
x <- list(a = 1:5, b = rnorm(10))
x
y <- lapply(x, mean)
y
library(datasets)
data(iris)
?iris
iris
colnames(iris)
iris[101:150]
iris[101:150,]
virginica <- iris[101:150,]
virginica[Sepal.Length]
virginica[,Sepal.Length]
virginica[[,Sepal.Length]]
virginica[[1]]
sl <- virginica[[1]]
mean(sl)
colnames(iris)
colmeans(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
mtcars
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)[1]
split(mtcars, mtcars$cyl)[1][,5]
split(mtcars, mtcars$cyl)[1][hp]
split(mtcars, mtcars$cyl)[1][,hp]
split(mtcars, mtcars$cyl)[1][5]
split(mtcars, mtcars$cyl)[1][[5]]
split(mtcars, mtcars$cyl)[1]
mean(93,62,95,66,52,65,97,66,91,113)
mean(c(93,62,95,66,52,65,97,66,91,113))
mean(93,62,95,66,52,65,97,66,91,1130)
mean(c(93,62,95,66,52,65,97,66,91,1130))
four <- mean(c(93,62,95,66,52,65,97,66,91,113))
split(mtcars, mtcars$cyl)[3]
data.set(split(mtcars, mtcars$cyl)[3])
mean(c(175,245,180,180,180,205,215,230,150,150,245,175,264,335))
eight <- mean(c(175,245,180,180,180,205,215,230,150,150,245,175,264,335))
eight - four
?ls
debug(ls)
.Ob <- 1
ls(pattern = "O")
mtcars
with(mtcars, tapply(hp, cyl, mean))
results <- with(mtcars, tapply(hp, cyl, mean))
results
with(mtcars, tapply(hp, cyl, mean))
results <- with(mtcars, tapply(hp, cyl, mean))
results
results[2,3]
results[3]
results[1]
results[3] - results[1]
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
iris
iris[101:150,]
iris[101:150,][1]
iris[101:150,][[1]]
mean(iris[101:150,][[1]])
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
source('cachematrix.R')
setwd("~/datasciencecoursera/ProgrammingAssignment2")
source('cachematrix.R')
A <- matrix(1:4, 2, 2)
Am <- makeCacheMatrix(A)
Ai <- cacheSolve(Am)
Ai
solve(A)
A
cacheSolve(Am)
